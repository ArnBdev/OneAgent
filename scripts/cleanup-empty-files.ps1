#!/usr/bin/env pwsh
# OneAgent Empty File Cleanup Script
# Removes autogenerated empty files and creates proper stubs where needed

Write-Host "üßπ OneAgent Empty File Cleanup" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

$projectRoot = "c:\Users\arne\.cline\mcps\OneAgent"
Set-Location $projectRoot

# Find empty files (excluding venv, node_modules, and system folders)
$emptyFiles = Get-ChildItem -Recurse -File | Where-Object { 
    $_.Length -eq 0 -and 
    $_.FullName -notlike "*\venv\*" -and 
    $_.FullName -notlike "*\node_modules\*" -and 
    $_.FullName -notlike "*\.history\*" -and
    $_.FullName -notlike "*\.git\*" -and
    $_.FullName -notlike "*\__pycache__\*"
}

Write-Host "Found $($emptyFiles.Count) empty files to process..." -ForegroundColor Yellow

# Define files to delete completely (autogenerated/temporary)
$filesToDelete = @(
    "tests\simple\test-business-collaboration.ts",
    "tests\test-cost-monitoring-v2.ts", 
    "tests\manual-test-runner.ts",
    "servers\memgraph_vs_mem0_analysis.md"
)

# Define files to create proper stubs for
$filesToStub = @(
    "coreagent\demo\README.md"
)

# Process deletions
Write-Host "`nüóëÔ∏è  Deleting empty autogenerated files..." -ForegroundColor Red
foreach ($file in $filesToDelete) {
    $fullPath = Join-Path $projectRoot $file
    if (Test-Path $fullPath) {
        $fileInfo = Get-Item $fullPath
        if ($fileInfo.Length -eq 0) {
            Remove-Item $fullPath -Force
            Write-Host "   ‚úÖ Deleted: $file" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Skipped (not empty): $file" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ÑπÔ∏è  Not found: $file" -ForegroundColor Gray
    }
}

# Process stub creations
Write-Host "`nüìù Creating proper stub files..." -ForegroundColor Blue
foreach ($file in $filesToStub) {
    $fullPath = Join-Path $projectRoot $file
    if (Test-Path $fullPath) {
        $fileInfo = Get-Item $fullPath
        if ($fileInfo.Length -eq 0) {
            switch ($file) {
                "coreagent\demo\README.md" {
                    $content = @"
# OneAgent Demo

This directory contains demonstration files and examples for OneAgent functionality.

## Contents

- Interactive demos showcasing OneAgent capabilities
- Example configurations and use cases
- Sample agent implementations

## Usage

Run demos from the project root:
```bash
npm run demo
```

## Documentation

For more information, see the main [OneAgent documentation](../../README.md).
"@
                    Set-Content -Path $fullPath -Value $content -Encoding UTF8
                    Write-Host "   ‚úÖ Created stub: $file" -ForegroundColor Green
                }
            }
        } else {
            Write-Host "   ‚ö†Ô∏è  Skipped (not empty): $file" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ÑπÔ∏è  Not found: $file" -ForegroundColor Gray
    }
}

# Clean up memory database link files (these are autogenerated)
Write-Host "`nüßπ Cleaning up memory database link files..." -ForegroundColor Magenta
$memoryDirs = @(
    "oneagent_gemini_memory",
    "oneagent_unified_memory",
    "servers\oneagent_gemini_memory_backup"
)

foreach ($dir in $memoryDirs) {
    $dirPath = Join-Path $projectRoot $dir
    if (Test-Path $dirPath) {
        $linkFiles = Get-ChildItem $dirPath -Recurse -File | Where-Object { 
            $_.Name -like "link*" -and $_.Length -eq 0 
        }
        foreach ($linkFile in $linkFiles) {
            Remove-Item $linkFile.FullName -Force
            Write-Host "   ‚úÖ Removed empty link file: $($linkFile.FullName.Replace($projectRoot, ''))" -ForegroundColor Green
        }
    }
}

# Final verification
Write-Host "`nüîç Final verification..." -ForegroundColor Cyan
$remainingEmptyFiles = Get-ChildItem -Recurse -File | Where-Object { 
    $_.Length -eq 0 -and 
    $_.FullName -notlike "*\venv\*" -and 
    $_.FullName -notlike "*\node_modules\*" -and 
    $_.FullName -notlike "*\.history\*" -and
    $_.FullName -notlike "*\.git\*" -and
    $_.FullName -notlike "*\__pycache__\*"
}

if ($remainingEmptyFiles.Count -eq 0) {
    Write-Host "‚úÖ All autogenerated empty files have been cleaned up!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  $($remainingEmptyFiles.Count) empty files remain (may be legitimate):" -ForegroundColor Yellow
    foreach ($file in $remainingEmptyFiles) {
        Write-Host "   - $($file.FullName.Replace($projectRoot, ''))" -ForegroundColor Gray
    }
}

Write-Host "`nüéâ Empty file cleanup complete!" -ForegroundColor Green
